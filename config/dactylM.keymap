/*
 * vim: ft=cpp
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/**/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>



#define DEFAULT 0
#define Movement 1
#define NumPad 2
#define Macro 3
#define Mouse 4

#define AS(keycode) &as LS(keycode) keycode

/ {
        // behaviors {
        //     as: auto_shift {
        //         compatible = "zmk,behavior-hold-tap";
        //         label = "AUTO_SHIFT";
        //         #binding-cells = <2>;
        //         tapping_term_ms = <200>;
        //         quick_tap_ms = <10>;
        //         flavor = "tap-preferred";
        //         bindings = <&kp>, <&kp>;
        //     };
        // };
        
        
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
AS(B)        AS(N1)  AS(N2)   AS(N3)   AS(N4)    AS(N5) &bt BT_CLR        &bt BT_CLR  AS(N6) AS(N7)    AS(N8)    AS(N9)       AS(N0)     AS(EQUAL)
&kp TAB      AS(Q)   AS(W)    AS(E)    AS(R)     AS(T)  AS(T)             AS(Y)   AS(Y)  AS(U)     AS(I)     AS(O)        AS(P)      AS(MINUS)
&kp ESC      AS(A)   AS(S)    AS(D)    AS(F)     AS(G)  AS(G)             AS(H)   AS(H)  AS(J)     AS(K)     AS(L)        AS(SEMI)   AS(SQT)
&kp LSHFT    AS(Z)   AS(X)    AS(C)    AS(V)     AS(B)                            AS(N)  AS(M)     AS(COMMA) AS(DOT)      AS(FSLH)   &kp RSHFT
AS(A)        AS(B)   AS(C)    AS(D)                                                            AS(T)     AS(X)        AS(Y)      AS(Z)

                                   AS(A)   AS(N2)                       AS(A)  AS(B)
                                   AS(N3)  AS(N4)                       AS(C)  AS(D)
                                   AS(N5)  AS(N6)                       AS(E)  AS(F)
            >;
        };

//         lower_layer {
//            bindings = <
// AS(GRAVE)   AS(N1)     AS(N2)    AS(N3)    AS(N4) AS(N5)                  AS(N6)   AS(N7)    AS(N8)    AS(LBKT)     AS(RBKT)   &none
// &kp GRAVE   AS(Q)      AS(W)     &kp K_VOL_DN &kp K_VOL_UP  &kp K_MUTE                   AS(Y)    AS(U)     AS(I)     AS(O)      AS(P)    &kp BSPC
// &kp LCTRL   &kp LC(A)  &kp LC(S) &kp LC(D) AS(F)  AS(G)                   &kp LEFT &kp DOWN  &kp UP    &kp RIGHT AS(SEMI) &kp SQT
// &bt BT_CLR  &kp LC(Z)  &kp LC(X) &kp LC(C) AS(V)  AS(B)                   &kp HOME &kp PG_DN &kp PG_UP &kp END   AS(FSLH) &bt BT_CLR
// &kp LGUI    &kp LALT   &kp LGUI  &kp LALT                                                    &kp RALT  &caps_word  &kp RALT  &caps_word 
//                                    &kp DELETE  &kp BSPC                   &kp SPACE &kp ENTER
//                                    &tog 1       &mo 1                      &mo 2  &mo 3 
//                                    &kp LEFT    &kp DOWN                   &kp UP  &kp RIGHT         
//             >;
//
//         };

//         raise_layer {
//            bindings = <
// &kp GRAVE &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &none
// &kp ESC   &kp Q  &kp W    &kp E    &kp R     &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &kp BSPC
// &kp TAB   &kp A  &kp S    &kp D    &kp F     &kp G                       &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
// &kp LSHFT &kp Z  &kp X    &kp C    &kp V     &kp B                       &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
//                  &kp LGUI &kp LALT &kp LCTRL &mo 1                       &mo 2  &kp RCTRL &kp RALT  &kp RGUI
//                  &kp LGUI &kp LALT &kp LCTRL &mo 1                       &mo 2  &kp RCTRL &kp RALT  &kp RGUI                 
//             >;
//
//         };
    };
};
